@html.extend('layout', function(model){ 
  @html.block('content', function(model){

<main>
  <div class="container-fluid px-4">
    <h1 class="mt-2">@model.title</h1>
    <div class="row">
      <div class="col-xl-12">
        <div class="card-header"></div>

        <div class="card-body">
          <div class="col-sm-6 col-xxl-12">
            <form id="form">
            
              <div class="mb-1" style="display: none">
                <input type="number" name="EpidemiaID" class="form-control" id="EpidemiaID" />
              </div>

              <div class="row mb-1" style="padding-top:20px">
                <div class="col-4">
                  <label for="Nomeepidemia" class="col-sm-2 col-xxl-1 col-form-label required">Nome Epidemia:</label>
                  <input type="text" name="Nomeepidemia" class="form-control-plaintext" id="Nomeepidemia" maxlength="30" required readonly />
                </div>
              </div>

            </form>
          </div>

          <div class="">
            <button type="button" class="btn btn-success me-2" onclick="btnSalvar()" id="btnSalvar" hidden>
              Salvar
            </button>

@*             <button type="button" class="btn btn-warning me-2" onclick="btnAlterar()" id="btnAlterar" hidden>
              Alterar
            </button>

            <button type="button" class="btn btn-warning me-2" onclick="btnSalvarAlteracao()" id="btnSalvarAlteracao" hidden>
              Salvar Alteração
            </button>

            <button type="button" class="btn btn-info me-2" onclick="btnCancelarAlteracao()" id="btnCancelarAlteracao" hidden>
              Cancelar Alteração
            </button>

            <button type="button" class="btn btn-danger" onclick="btnRemover()" id="btnRemover" hidden>
              Remover
            </button> *@

            <button type="button" class="btn btn-primary" onclick="window.location.href = '/epidemia'" id="btnFechar">
              Fechar
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

}) })

<script>
  const form = document.getElementById("form");
  var oper = "@model.oper";

  window.onload = limpaForm;  // Corrigido: atribuindo a função limpaForm corretamente

  //@ Limpa o conteúdo dos campos do formulário
  async function limpaForm() {
    $("#form").each(function() {
      this.reset();
    });

    // Mostra os botões de acordo com o tipo da operação
    if (oper == "c") {
      $("#btnSalvar").prop("hidden", false);
      habilitaForm();
    }

    if (oper == "u") {
      $("#btnAlterar").prop("hidden", false);
    }

    //Necessário para buscar dados de acordo com o ID para serem alterados
    if (oper == "u") {
      idBusca = "@model.idBusca";
      await getDados(idBusca);
    }

    //Coloca o epidemia no primeiro campo do formulário
    $("#Nomeepidemia").focus();
  }

//@ Busca os dados de acordo com o ID para serem alterados
async function getDados(idBuscaPar) {
  console.log("[getDados] idBusca", idBuscaPar);
  try {
    const resp = await axios.post(
      "/epidemia/getDados", {
        idBusca: idBuscaPar
      }, {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
    if (resp.data.status == "ok") {
      $("#EpidemiaID").val(resp.data.registro.EpidemiaID);
      $("#Nomeepidemia").val(resp.data.registro.Nomeepidemia);
      if (resp.data.registro.Removido) {
        $("#Removido").prop("checked", true);
      } else {
        $("#Removido").prop("checked", false);
      }
    } else {
      alert("Houve erro ao buscar os dados das epidemias!");
    }
  } catch (error) {
    alert("[view_cadEpidemia|getDados]Ocorreu um erro inesperado!" + error);
  }
}

  //@ Valida o formulário antes de salvá-lo
  function validaForm(formDataPar) {
    var validado = true;
    $("#form input, #form select").each(function(index) {
      var input = $(this);
      if (
        input.attr("type") == "text" &&
        input.prop("required") &&
        String(input.val()).length == 0
      ) {
        alert("Campo obrigatório");
        $(input).focus();
        validado = false;
        return false;
      }
    });

    formDataPar.set("Removido", false);

    return validado;
  }

  //@ Salva os dados
  async function btnSalvar() {
    const formData = new FormData(form);

    const validado = validaForm(formData);
    if (!validado) {
      return;
    }

    try {
      const resp = await axios.post("/epidemia/insertEpidemia", formData, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (resp.data.status == "ok") {
        alert(resp.data.mensagem);
        limpaForm();
      } else {
        alert(resp.data.mensagem);
      }
    } catch (error) {
      alert("[view_cadEpidemia|btnSalvar]Ocorreu um erro inesperado!" + error);
    }
  }

  //@ Habilita form para alteração
  function habilitaForm() {
    $("#Nomeepidemia").addClass("form-control");  // Corrigido: uso de addClass
    $("#Nomeepidemia").prop("readonly", false);

    $("#Removido").prop("disabled", false);
  }

  //@ Habilita a alteração
  async function btnAlterar() {
    $("#btnSalvarAlteracao").prop("hidden", false);
    $("#btnCancelarAlteracao").prop("hidden", false);
    $("#btnRemover").prop("hidden", false);
    $("#btnAlterar").prop("hidden", true);

    habilitaForm();
  }


  async function testeFormData() {
    const formData = new FormData(form);
    console.log(formData.get("Nomeepidemia"));
  }
</script>
